Mumoro: MUltiModal MUltiObjective ROuting




== Requirements ==
On ubuntu or debian, please install the developpment versions
* GCC: C++ compiler (others aren't tested)
* Boost: used for the graph structures, serialization and heaps
* Python2
* Swig: for interfacing python with C++


=== Installing Python Dependencies ===

Python dependencies can be install by running `sudo python setup.py install`



=== osm4routing ===

For importing data from OSM files, this project uses osm4routing.
Some modifications were brought to osm4routing to support:
 
 * Importing data from multiple OSM files
 * Use of the `maxspeed` key when defining  the maximum speed on a road segment

Make sure you have an osm4routing coming from our repository ( https://github.com/athy/osm4routing ) installed.
You can fetch it with git, explanations on how to install it are provided in the README.
 
```
git clone https://github.com/athy/osm4routing.git
```



== Project layout ==

MuMoRo is composed of three parts

- Core : A C++ core that contains mainly the graph structure. This part is in lib/core
- Algorithms : C++ implementation of various routing algorithms
- Frontend : A python part that is mainly used to import data and run a web service to have a basic UI. It uses SWIG to interface with the C++ code


== Building with CMake ==

The C++ code can be built with a standard CMake build : 

```
mkdir build
cd build/
cmake -DCMAKE_BUILD_TYPE=Release ..
make
```

The default target is an executable based on algorithms/main.cpp. To build the swig interface, run `make swig`. 
This will generate a shared library (_mumoro.so) and a python interface (mumoro.py) that will be automatically copied in lib/core/


== Running ==

Running MuMoro requires a configuration (aka scenario). Some example are present in the `scenarios/` folder. 
Those allow to define which data (OSM or GTFS) will be used for building the multi-modal graph.

=== Importing data ===

First step is to load data into your database. This is done by running: `python data_import.py {your_scenario.py}`


=== Running the server ===

Once the data is imported, next step is to run the server.
If ran for the first time the graph will be generated from database and serilalized in a .dump file. 
This file will be used for subsequent loading as long as the scenario is not changed.

`python server.py {scenario.py}`

Interface is then accessible on http://localhost:3001/ (or whatever url defined in the configuration).

